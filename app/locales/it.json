{
    "links": {
        "eng": "../",
        "it": ""
    },
    "works": {
        "key": "Progetti"
    },
    "description": {
        "hi": "Ciao!",
        "title": "Mi chiamo Roberto, sono un web developer alla ricerca del primo lavoro. <br> Ho un background nella produzione audiovisiva e nel creative coding, ed esperienza lavorativa all'interno di team multidisciplinari. <br>Adoro imparare nuove cose e sono in grado di farlo rapidamente, tutto ciò che troverete in questo portfolio l'ho imparato da autodidatta. Spero di sentirvi presto!",
        "subtitle": "Coder appassionato, adoro imparare cose nuove, sono sempre concentrato e determinato."
    },
    "contacts": {
        "find": "Puoi trovarmi qui",
        "me": "Contattami",
        "name": "Nome",
        "subject": "Oggetto",
        "message": "Messaggio"
    },
    "filters": {
        "all": "Tutti"
    },
    "skills": {
        "title": "Tecnologie e competenze",
        "tools": "Strumenti",
        "skills": "Competenze",
        "description": "Ho competenze backend e frontend, familiarità con i moderni tool di sviluppo ed un backround nel creative coding"
    },
    "about": {
        "softFast": "Adoro imparare nuove cose e sono in grado di farlo rapidamente",
        "softTeam": "Ho esperienza di lavoro in team multidisciplinari",
        "softComm": "Grazie al mio background nella produzione audiovisiva so comunicare efficaciemente con le varie figure professionali che compongono un team, dalla figura tecnica, al designer o all'artista",
        "softLang": "Madrelingua italiano, fluente in Inglese scritto e parlato, al momento sto imparando il Catalano per nessuna ragione specifica (a parte che è divertente!)"
    },
    "technologies": {
        "key": "Tecnologie"
    },
    "what": {
        "key": "Cosa ho fatto"
    },
    "mrwolfa": {
        "intr1": "Un Bot Telegram sviluppato in <strong>Node.js</strong> in grado di rispondere a domande riguardanti diversi ambiti, come matematica, fisica, storia, cultura, nutrizione e tanti altri.",
        "intr2": "Il calcolo delle risposte sfrutta la potenza del motore computazionale di conoscenza <strong>Wolfram|Alpha</strong> e della sua API.",
        "intr3": "Le risposte generate possono essere o messaggi di testo o anche messaggi vocali sintetizzati grazie alla <strong>Google Cloud Text-to-Speech API</strong>.",
        "capt1": "Funziona in chat privata",
        "capt2": "Risponde con messaggi vocali",
        "capt3": "Filtra le domande opportunamente",
        "capt4": "Funziona come inline-bot",
        "capt5": "Calcoli semplici con Math.js",
        "capt6": "Wolfram|Alpha per tutto il resto",
        "try": "Prova MrWolfa",
        "point1": "Ho utilizzato il framework <strong>Telegraf.js</strong> per comunicare con la Telegram Bot API e sviluppare un bot con un set di comandi personalizzati, funzionante sia in chat privata che come inline-bot",
        "point2": "Ho usato la libreria <strong>wolfram-alpha-api</strong> per inviare domande ed ottenere risposte da Wolfram|Alpha",
        "point3": "Ho utilizzato il client Node.js della <strong>Google Cloud Text-to-Speech API</strong> per sintetizzare le risposte ottenute da Wolfram|Alpha e poterle inviare come messagi vocali",
        "point4": "Ho utilizzato il modulo <strong>languagedetect</strong> per implementare un filtro che individua le domande in inglese scorretto, al fine di non sprecare chiamate api",
        "point5": "Ho usato <strong>Math.js</strong> per gestire le domande contententi matematica elementare, al fine di non sprecare chiamate api",
        "point6": "Ho scelto un approccio <strong>Object Oriented</strong>, nel dettaglio ho utilizzato una combinazione del <strong>Template method pattern</strong> e dello <strong>Strategy pattern</strong> per implementare l'albero decisionale con cui il bot risponde alle domande",
        "point7": "Ho utilizzato Git ed una <strong>Heroku Pipeline</strong> per implementare un semplice workflow per la continuous delivery e la gestione delle release del bot"
    },
    "blup": {
        "intr1": "Una web app per trovare fontanelle d'acqua pubbliche.",
        "intr2": "Una piattaforma comunitaria in cui gli utenti possono contribuire trovando e registrando nuove fontane, oppure verificando la presenza di quelle già segnalate o riportando problemi e malfunzionamenti.",
        "intr3": "Realizzato con <strong>Node.js</strong>, <strong>Express.js</strong> e <strong>MongoDB (Mongoose.js)</strong> e <strong>EJS</strong>, Blup nasce come il mio progetto finale per il corso <a href='https://www.udemy.com/share/101W9CBEcacllXRXw=/'>'The Web Developer Bootcamp 2021'</a> ed è attualmente un work in progress per una web app completa e pronta per l'uso in produzione.",
        "intr4": "La versione attualmente rilasciata è un prototipo con le core feature funzionanti ed un database popolato da fake data.",
        "capt1": "Mappa principale delle fontane (fake data)",
        "try": "Prova Blup",
        "point1": "Ho progettato l'applicazione seguendo il pattern <strong>Model–View–Controller</strong> ",
        "point2": "Ho implementato un <strong>Service layer</strong> al fine di disaccoppiare la business logic dai controller Express.js",
        "point3": "Ho implementato un <strong>sistema Publish/Subscribe</strong> tramite gli eventi Node.js al fine di gestire le operazioni in background",
        "point4": "Ho usato <strong>Express.js</strong> per la creazione del server e la definizione di <strong>rotte RESTful</strong>",
        "point5": "Ho utilizzato <strong>MongoDB</strong> con <strong>Mongoose.js</strong> per la modellazione dei dati e la gestione delle <strong>operazioni CRUD</strong>",
        "point16": "Ho utilizzato il linguaggio di templating <strong>EJS</strong> per generare le view e sfruttare il server-side rendering",
        "point6": "Ho utilizzato <strong>JOI</strong> per la <strong>validazione dati</strong> nelle operazioni CRUD",
        "point7": "Ho usato i middleware <strong>express-session</strong> e <strong>Passport</strong> per gestire <strong>autenticazione e autorizzazione</strong>",
        "point8": "Ho utillizzato i middleware <strong>multer</strong> e <strong>cloudinary</strong> per gestire <strong>l'upload dei file</strong>",
        "point9": "Ho fatto uso del modulo <strong>sanitize-html</strong> e dei middleware <strong>express-mongo-sanitize</strong> ed <strong>Helmet</strong> per garantire la <strong>sicurezza</strong> base dell'app",
        "point10": "Ho sviluppato una interfaccia <strong>mobile-first</strong> e <strong>totalmente responsive</strong> con <strong>Bulma</strong>. Ho scelto un framework css puro (senza Javascript incluso) come Bulma perché non ritenevo di aver apprfondontio abbastanza la manipolazione del DOM durante il corso, ho colto quindi l'occasione per fare più pratica con JavaScript per il frontend",
        "point11": "Ho scritto numerosi <strong>script per la navigazione e l'interazione con l'interfaccia</strong>: cambio tab, chiusura notifiche, apertura e chiusura modali, comportamento della navbar",
        "point12": "<strong>Ho scritto da zero delle funzioni per la validazione client-side dei form</strong>, utilizzando le classi ES6 ed il Template Method pattern",
        "point13": "Ho implementato delle <strong>operazioni AJAX</strong> per aggiornare dinamicamente il contentuto della pagina quando si inseriscono od eliminano verifiche, commenti e segnalazioni",
        "point14": "Ho usato <strong>Mapbox GL JS</strong> per mostrare le fontane registrate su una mappa a cluster",
        "point15": "Ho utilizzato <strong>Glide.js</strong> per implementare un semplice carousel per le immagini"
    },
    "habitat": {
        "intr1": "Habitat è una composizione audiovisiva prodotta dalla Biennale di Venezia e realizzata per il festival Biennale Musica 2020.",
        "intr2": "Ho lavorato per 6 mesi presso gli studi del CIMM (Centro di Informatica Musicale Multimediale) in qualità di software developer e videoartista, in collaborazione con un compositore ed un sassofonista.",
        "intr3": "Il mio compito è stato sviluppare un sistema per la generazione real time di video 3D a partire da input audio live. Ho avuto l'opportunità di lavorare con tecnologie innovative come <strong>Touchdesigner</strong> ed utilizzare <strong>Python</strong> per lo scripting e <strong>GLSL</strong> per la scrittura di shader grafici.",
        "intr4": "Qui sotto è possibile visionare la registrazione della premiere avvenuta a Biennale Musica 2020",
        "capt1": "A lavoro presso gli studi del CIMM",
        "capt2": "A lavoro presso il teatro Tese dei Soppalchi",
        "point1": "Ho usato <strong>Touchdesigner</strong> e <strong>Python</strong> per sviluppare l'applicazione principale, in grado di gestire I/O (più di 80 canali Open Sound Control e numerosi canali audio), data flow, analisi in tempo reale dei segnali audio di sassofono ed elettronica, business logic, generazione video 3D e rendering pipeline",
        "point2": "Ho scritto diversi <strong>vertex e pixel shaders in GLSL</strong> al fine di renderizzare geometrie 3D che possono essere deformate in tempo reale a seconda di parametri esterni",
        "point3": "Ho utilizzato il <strong>Wolfram Language</strong> per estrarre vari descrittori audio dai file usati nella composizione",
        "point4": "Ho lavorato e comunicato efficaciemente all'interno di un team internazionale che includeva un compositore, un sassofonista, numerosi tecnici audio, video e luci ed infine i tutor messi a disposizione dalla Biennale (Andrew Quinn, Thierry Coduys, Simone Conforti, Maurilio Cacciatore)",
        "point5": "L'ambito tecnico del progetto è ampio e risulta complesso risassumerlo ulteriormente, ma sarei più che felice di approfondire questa fantastica esperienza durante un colloquio!"
    }
}